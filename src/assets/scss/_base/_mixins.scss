// pixels to root ephemeral unit
@mixin font-size($sizeValue: 1.6) {
  font-size: ($sizeValue * 10) + px;
  font-size: $sizeValue + rem;
}

// clearfix/group after method. this only works in IE 8 and up
@mixin groupfix {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}

@mixin col($col) {
  width: (($max-wrapper-width - $gutter-width*($cols/$col - 1))/($cols/$col))/$max-wrapper-width*100%;
}
@mixin triangle($direction, $size, $color) {
  @if $direction == "left" {
    left: 0;
    margin-left: -$size;
    margin-top: -$size;
    top: 50%;

    border-bottom: $size solid transparent;
    border-left: 0;
    border-right: $size solid $color;
    border-top: $size solid transparent;
  }
  @if $direction == "right" {
    margin-right: -$size;
    margin-top: -$size;
    right: 0;
    top: 50%;

    border-bottom: $size solid transparent;
    border-left: $size solid $color;
    border-right: 0;
    border-top: $size solid transparent;
  }
  @if $direction == "top" {
    left: 50%;
    margin-left: -$size;
    margin-top: -$size;
    top: 0;

    border-bottom: $size solid $color;
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-top: 0;
  }
  @if $direction == "bottom" {
    bottom: 0;
    left: 50%;
    margin-bottom: -$size;
    margin-left: -$size;

    border-bottom: 0;
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-top: $size solid $color;
  }
}

// RESPOND-TO MIXINS
// these few lines are a bit complicated, so do yourself a favor and DONT CHANGE THAT SHIT!!
// source: https://gist.github.com/Snugug/2493551
//
// ...
// Our respond-to mixin, with the new hotness?
// A little more complicated than previous respond-to mixins, but now runs off of a variable. This is also Rev 1 so if someone can help me make it better, I'm all ears.
// We need to start with a defaulted breakpoints variable.

$breakpoints: false !default;

@mixin respond-to($context) {
  @if $breakpoints != false {
    // Check to see if the 2nd item is a number. If it is, we've got a single query
    @if type-of(nth($breakpoints, 2)) == 'number' {
      // Check to see if the context matches the breakpoint namespace
      @if $context == nth($breakpoints, 1) {
        // Call Media Query Generator
        @include media-query-gen($breakpoints) {
          @content;
        }
      }
    }
    // Else, loop over all of them
    @else {
      // Loop over each breakpoint and check context
      @each $bkpt in $breakpoints {
        // If context is correct
        @if $context == nth($bkpt, 1) {
          // Call the generator!
          @include media-query-gen($bkpt) {
            @content;
          }
        }
      }
    }
  }
}

// This functionality gets used twice so I turned it into its own mixin.

@mixin media-query-gen($bpt) {
  // Get length of breakpoint variable, minus the namespace
  $length: length($bpt);
  // Go through all of the breakpoint items, starting at the second, and add them to a variable to be passed into the media query mixin
  $mq: false !default;
  @for $i from 2 through $length {
    // If it's the first item, override $mq
    @if $i == 2 {
      $mq: nth($bpt, $i);
    }
    // Else, join $mq
    @else {
      $mq: join($mq, nth($bpt, $i));
    }
  }
  // Call Media Query mixin
  @include media-query($mq) {
    @content;
  }
}

// Slightly modified version of my Media Query Mixin (https://gist.github.com/2490750) from earlier, modified to accommodate list input
@mixin media-query($value, $operator: 'min-width', $query: 'screen') {
  // If a list is passed in for value, break it into value, operator, and query
  @if type-of($value) == 'list' {
    $mq: $value;

    @for $i from 1 through length($mq) {
      @if $i == 1 {
        $value: nth($mq, 1);
      }
      @else if $i == 2 {
        $operator: nth($mq, 2);
      }
      @else if $i == 3 {
        $query: nth($mq, 3);
      }
    }
  }

  @media #{$query} and (#{$operator}: #{$value}) {
    @content;
  }
}


@mixin icon($position: 'before', $styles: true, $icon: false) {
  &:#{$position} {
    @if $icon {
        content: match($icons, $icon);
    }
    @if $styles {
      font-family: 'Icons';
      speak: none;
      font-style: normal;
      font-weight: normal;
      font-variant: normal;
      text-transform: none;
      line-height: 1;
      -webkit-font-smoothing: antialiased;
    }
    @content;
  }
}